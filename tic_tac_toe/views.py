# Create your views here.
import datetime

from django.template import Context, loader
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.core.urlresolvers import reverse
from django.core.exceptions import ObjectDoesNotExist

from django.core.cache import cache
from tictactoe.tic_tac_toe.game import TicTacToe



def index(request):
    """
    Main tic_tac_toe view for welcome and entering games
    
    """
    # Specify template, generate context, and return response
    template = loader.get_template('tic_tac_toe/index.html')
    context = Context({})
    return HttpResponse(template.render(context))
# End Def

def game(request, user, difficulty='insane'):
    """
    Main tic_tac_toe view for displaying current game
    
    """
    # Try to get game from the cache
    current_game = cache.get(user)
    if not current_game: # Create new game, add to cache
        current_game = TicTacToe()
        cache.set(user, current_game)
        cache.set(user + '-diff', difficulty)
    difficulty = cache.get(user + '-diff')
    
    # Check if game is over
    if current_game.game_over():
        return HttpResponseRedirect(reverse('game-over', args=[user]))
    
    # Get the tokens to pass to the template
    tokens = current_game.get_constants()

    # Specify template, create context, and return response
    template = loader.get_template('tic_tac_toe/game.html')
    context = Context({"user": user, "board": current_game.get_board(),
        "unplayed": tokens[0], "player1": tokens[1], 
        "player2": tokens[2], "difficulty": difficulty})
    return HttpResponse(template.render(context))
# End Def

def move(request, user, position):
    """
    Main tic_tac_toe view for logic to perform
    requested move and computer counter_move
    
    """
    # Try to get game from the cache
    current_game = cache.get(user)
    if not current_game:
        # No Game Found--Game Home will create one
        return HttpResponseRedirect(reverse('game-home', args=[user]))
    
    # Ensure position is an int
    try:
        pos = int(position)
    except ValueError:
        # Incorrect URL not generated by us--return to game view
        return HttpResponseRedirect(reverse('game-home', args=[user]))

    # Get the constants and execute move
    tokens = current_game.get_constants()
    if current_game.move(pos, tokens[1]): # Move Successful

        # Update cache state
        cache.set(user, current_game)
        
        # If game is now over we want to go game-over view
        if current_game.game_over():
            return HttpResponseRedirect(reverse('game-over', kwargs={'user': user}))

        # Make computer move
        difficulty = cache.get(user + '-diff')
        if (difficulty == "easy"):
            current_game.player_weak_AI_move(tokens[2])
        else: 
            current_game.player_AI_move(tokens[2])
        cache.set(user, current_game)
        
        # Check end game
        # If game is now over we want to go game-over view
        if current_game.game_over():
            return HttpResponseRedirect(reverse('game-over', kwargs={'user': user}))
    
    return HttpResponseRedirect(reverse('game-home', kwargs={'user': user}))
# End Def

def new_game(request, user):
    """
    Clear game state for the user and return tomain game view
    
    """
    # Try to get game from the cache
    current_game = cache.get(user)
    current_difficulty = cache.get(user + '-diff')
    if current_game:
        cache.delete(user)

    # Redirect to Game
    if current_difficulty == "easy":
        return HttpResponseRedirect(reverse('game-home-easy', kwargs={'user': user}))
    else:
        return HttpResponseRedirect(reverse('game-home', kwargs={'user': user}))
# End Def

def game_over(request, user):
    """
    Game over view for the current user
    
    """
    # Try to get game from the cache--Redirect to main if no game
    current_game = cache.get(user)
    if not current_game:
        return HttpResponseRedirect(reverse('game-home', kwargs={'user': user}))
    
    # If game is not over--return to game view
    if not current_game.game_over():
        return HttpResponseRedirect(reverse('game-home', kwargs={'user': user}))    
    else:
        # Get the tokens for template, also determining winner
        tokens = current_game.get_constants()    
        # Get winnings data and determine outcome
        winnings = current_game.winner()
        winner_row = None
        if winnings:
            if winnings[0] == tokens[1]:
                outcome = 'won'
            else:
                outcome = 'lost'
            winner_row = winnings[1]
        else:
            outcome = 'cats' 
         
        # Specify template, create context, and return response
        template = loader.get_template('tic_tac_toe/game_over.html')
        context = Context({"user": user, "board": current_game.get_board(),
            "unplayed": tokens[0], "player1": tokens[1], 
            "player2": tokens[2], "outcome": outcome, 
            "winner_row": winner_row})
        return HttpResponse(template.render(context))        
# End Def

def change_difficulty(request, user):
    """
    Game over view for the current user
    
    """
    # Redirect to Game
    current_difficulty = cache.get(user + '-diff')
    if current_difficulty == "easy":
        cache.set(user + '-diff', "insane")
    else:
        cache.set(user + '-diff', "easy")
    
    return HttpResponseRedirect(reverse('game-home', kwargs={'user': user}))    

# End Def
